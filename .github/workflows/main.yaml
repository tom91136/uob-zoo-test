name: CI
on: [push]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-24.04
    steps:
      # - name: Free Disk Space (Ubuntu)
      #   uses: jlumbroso/free-disk-space@main
      #   with:
      #     tool-cache: false
      #     android: true
      #     dotnet: true
      #     haskell: true
      #     large-packages: true
      #     docker-images: true
      #     swap-storage: true

      - name: Before
        run: |
          set -xe
          df -H

      - name: Removing stuff
        run: |
          set -xe
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/share/swift
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/.ghcup
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo rm -rf /opt/hostedtoolcache/
          sudo rm -rf /usr/local/graalvm/
          sudo rm -rf /usr/local/share/powershell
          sudo rm -rf /usr/local/share/chromium
          sudo rm -rf /usr/local/lib/node_modules
          sudo docker image prune --all --force

          APT_PARAMS='sudo apt -y -qq -o=Dpkg::Use-Pty=0'
          $APT_PARAMS remove -y '^dotnet-.*'
          $APT_PARAMS remove -y '^llvm-.*'
          $APT_PARAMS remove -y '^php.*'
          $APT_PARAMS remove -y '^mongodb-.*'
          $APT_PARAMS remove -y '^mysql-.*'
          $APT_PARAMS remove -y azure-cli google-* google-chrome-stable firefox mono-devel libgl1-mesa-dri
          $APT_PARAMS autoremove --purge -y
          $APT_PARAMS autoclean
          $APT_PARAMS clean

      - name: After
        run: |
          set -xe
          df -H

      - name: Checkout
        uses: actions/checkout@v4

      - name: Enable KVM group perms # See https://github.com/actions/runner-images/issues/7670
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
          sudo apt-get update
          sudo apt-get install -y --no-install-suggests libvirt-clients libvirt-daemon-system libvirt-daemon virtinst bridge-utils qemu-system-x86 qemu-system-aarch64 qemu-user-static binfmt-support
          sudo usermod -a -G kvm,libvirt $USER

      - name: Generate keys
        run: ssh-keygen -t ed25519 -N "" -f $HOME/.ssh/id_ed25519

      ################

      - name: Tailscale
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:example

      - name: Install tools
        run: |
          sudo apt-get install -y tmux micro
          cd
          git clone https://github.com/gpakosz/.tmux.git
          ln -s -f .tmux/.tmux.conf
          cp .tmux/.tmux.conf.local .

      - name: Wait for SSH
        run: |
          sudo sed -i 's/PasswordAuthentication yes/PasswordAuthentication no/g' /etc/ssh/sshd_config
          sudo systemctl restart ssh
           
          mkdir -p $HOME/.ssh
          touch $HOME/.ssh/authorized_keys 
          printf "%s\n" "${{ secrets.PUBLIC_KEY }}" >> $HOME/.ssh/authorized_keys
          sudo chown runner:runner $HOME/.ssh/authorized_keys
          chmod go-w ~/
          chmod 700 ~/.ssh
          chmod 600 ~/.ssh/authorized_keys

      ################

      - name: Install dependencies
        run: sudo apt-get install -y cloud-utils libvirt-dev

      - name: Install packer and vagrant
        run: |
          wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt-get update -y 
          sudo apt-get install -y packer vagrant

      - name: Setup vagrant plugin
        run: vagrant plugin install vagrant-libvirt

      - name: Stats
        run: df -H

      # - name: Create proxmox image
      #   working-directory: proxmox
      #   run: |
      #     make build-libvirt
      #     vagrant box add -f proxmox-ve-amd64 proxmox-ve-amd64-libvirt.box.json
      #     make clean

      # - name: Stats
      #   run: df -H

      # - name: Create all image
      #   working-directory: images
      #   run: |
      #     make all -j
      #     rm -rf *.iso

      # - name: Stats
      #   run: df -H

      # - name: Run provision
      #   run: vagrant up

      # - name: Stats
      #   run: df -H

      - name: Wait for SSH
        run: sleep infinity
